class CD {
    private static _idCounter = 1;
    private _id: number;
    private _title: string;
    private _artist: string;
    private _year: number;

    constructor(title: string, artist: string, year: number) {
        this._id = CD._idCounter++;
        this._title = title;
        this._artist = artist;
        this._year = year;
    }

    get id(): number {
        return this._id;
    }

    get title(): string {
        return this._title;
    }

    set title(value: string) {
        if (!value.trim()) {
            throw new Error("T√™n CD kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
        }
        this._title = value;
    }

    get artist(): string {
        return this._artist;
    }

    set artist(value: string) {
        if (!value.trim()) {
            throw new Error("Ngh·ªá sƒ© kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
        }
        this._artist = value;
    }

    get year(): number {
        return this._year;
    }

    set year(value: number) {
        if (value < 1900 || value > new Date().getFullYear()) {
            throw new Error("NƒÉm ph√°t h√†nh kh√¥ng h·ª£p l·ªá.");
        }
        this._year = value;
    }
}

class CDStoreManager {
    private _cds: CD[];

    constructor() {
        this._cds = [];
    }

    addCD(title: string, artist: string, year: number): void {
        const newCD = new CD(title, artist, year);
        this._cds.push(newCD);
        console.log("üé∂ CD ƒë√£ ƒë∆∞·ª£c th√™m v√†o c·ª≠a h√†ng.");
    }

    listCDs(): void {
        if (this._cds.length === 0) {
            console.log("‚ö†Ô∏è C·ª≠a h√†ng ch∆∞a c√≥ CD n√†o.");
        } else {
            console.log("üé∂ Danh s√°ch CD trong c·ª≠a h√†ng:");
            this._cds.forEach(cd => {
                console.log(`${cd.id}. T√™n CD: ${cd.title}, Ngh·ªá sƒ©: ${cd.artist}, NƒÉm ph√°t h√†nh: ${cd.year}`);
            });
        }
    }

    removeCD(id: number): void {
        const index = this._cds.findIndex(cd => cd.id === id);
        if (index !== -1) {
            this._cds.splice(index, 1);
            console.log("üé∂ CD ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi c·ª≠a h√†ng.");
        } else {
            console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y CD v·ªõi m√£ n√†y.");
        }
    }

    searchCD(title: string): void {
        const foundCDs = this._cds.filter(cd => cd.title.toLowerCase().includes(title.toLowerCase()));
        if (foundCDs.length > 0) {
            console.log("üé∂ K·∫øt qu·∫£ t√¨m ki·∫øm:");
            foundCDs.forEach(cd => {
                console.log(`${cd.id}. T√™n CD: ${cd.title}, Ngh·ªá sƒ©: ${cd.artist}, NƒÉm ph√°t h√†nh: ${cd.year}`);
            });
        } else {
            console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y CD n√†o v·ªõi t√™n n√†y.");
        }
    }
}

class Main4 {
    private _cdStoreManager: CDStoreManager;

    constructor() {
        this._cdStoreManager = new CDStoreManager();
    }

    start(): void {
        let running = true;

        while (running) {
            let choice = prompt(
                "Ch·ªçn ch·ª©c nƒÉng:\n" +
                "1. Th√™m CD v√†o c·ª≠a h√†ng\n" +
                "2. Hi·ªÉn th·ªã danh s√°ch CD\n" +
                "3. X√≥a CD theo m√£ CD\n" +
                "4. T√¨m ki·∫øm CD theo t√™n\n" +
                "5. D·ª´ng ch∆∞∆°ng tr√¨nh\n"
            );

            switch (choice) {
                case "1": {
                    let title = prompt("Nh·∫≠p t√™n CD:");
                    let artist = prompt("Nh·∫≠p ngh·ªá sƒ© bi·ªÉu di·ªÖn:");
                    let year = Number(prompt("Nh·∫≠p nƒÉm ph√°t h√†nh:"));
                    if (title && artist && !isNaN(year)) {
                        this._cdStoreManager.addCD(title, artist, year);
                    } else {
                        console.log("‚ö†Ô∏è Th√¥ng tin CD kh√¥ng h·ª£p l·ªá.");
                    }
                    break;
                }
                case "2": {
                    this._cdStoreManager.listCDs();
                    break;
                }
                case "3": {
                    let id = Number(prompt("Nh·∫≠p m√£ CD c·∫ßn x√≥a:"));
                    if (!isNaN(id)) {
                        this._cdStoreManager.removeCD(id);
                    } else {
                        console.log("‚ö†Ô∏è M√£ CD kh√¥ng h·ª£p l·ªá.");
                    }
                    break;
                }
                case "4": {
                    let title = prompt("Nh·∫≠p t√™n CD c·∫ßn t√¨m:");
                    if (title) {
                        this._cdStoreManager.searchCD(title);
                    } else {
                        console.log("‚ö†Ô∏è T√™n CD kh√¥ng h·ª£p l·ªá.");
                    }
                    break;
                }
                case "5": {
                    running = false;
                    console.log("üö™ ƒê√£ tho√°t ch∆∞∆°ng tr√¨nh.");
                    break;
                }
                default: {
                    console.log("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.");
                }
            }
        }
    }
}

let app4 = new Main4();
app4.start();