"use strict";
class Room {
    constructor(roomId, type, pricePerNight) {
        this._roomId = roomId;
        this._type = type;
        this._pricePerNight = pricePerNight;
        this._isAvailable = true;
    }
    get roomId() {
        return this._roomId;
    }
    get roomType() {
        return this._type;
    }
    get pricePerNight() {
        return this._pricePerNight;
    }
    get isAvailable() {
        return this._isAvailable;
    }
    bookRoom() {
        if (!this._isAvailable) {
            console.log("‚ö†Ô∏è Ph√≤ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t tr∆∞·ªõc ƒë√≥.");
            return;
        }
        this._isAvailable = false;
        console.log(`‚úÖ Ph√≤ng ${this._roomId} ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t.`);
    }
    releaseRoom() {
        if (this._isAvailable) {
            console.log("‚ö†Ô∏è Ph√≤ng ƒë√£ tr·ªëng.");
            return;
        }
        this._isAvailable = true;
        console.log(`‚úÖ Ph√≤ng ${this._roomId} ƒë√£ ƒë∆∞·ª£c tr·∫£.`);
    }
}
class StandardRoom extends Room {
    constructor(roomId, pricePerNight) {
        super(roomId, "Standard", pricePerNight);
    }
    calculateCost(nights) {
        return nights * this._pricePerNight;
    }
}
class DeluxeRoom extends Room {
    constructor(roomId, pricePerNight) {
        super(roomId, "Deluxe", pricePerNight);
    }
    calculateCost(nights) {
        return nights * this._pricePerNight + 20 * nights; // Th√™m chi ph√≠ d·ªãch v·ª• ƒÉn s√°ng
    }
}
class SuiteRoom extends Room {
    constructor(roomId, pricePerNight) {
        super(roomId, "Suite", pricePerNight);
    }
    calculateCost(nights) {
        return nights * this._pricePerNight + 50 * nights; // Th√™m chi ph√≠ d·ªãch v·ª• spa
    }
}
class Person2 {
    constructor(id, name, email, phone) {
        this._id = id;
        this._name = name;
        this._email = email;
        this._phone = phone;
    }
    get id() {
        return this._id;
    }
    get name() {
        return this._name;
    }
    getDetails() {
        return `Kh√°ch h√†ng [ID: ${this._id}, T√™n: ${this._name}, Email: ${this._email}, SƒêT: ${this._phone}]`;
    }
}
class Booking {
    constructor(customer, room, nights) {
        this._bookingId = Booking._bookingIdCounter++;
        this._customer = customer;
        this._room = room;
        this._nights = nights;
        this._totalCost = room.calculateCost(nights);
    }
    getDetails() {
        return `ƒê·∫∑t ph√≤ng [ID: ${this._bookingId}, Kh√°ch h√†ng: ${this._customer.name}, Ph√≤ng: ${this._room.roomType}, S·ªë ƒë√™m: ${this._nights}, T·ªïng chi ph√≠: ${this._totalCost}]`;
    }
}
Booking._bookingIdCounter = 1;
class HotelManager {
    constructor() {
        this._rooms = [];
        this._customers = [];
        this._bookings = [];
    }
    addRoom(type, pricePerNight) {
        let room;
        switch (type) {
            case "Standard":
                room = new StandardRoom(HotelManager._roomIdCounter++, pricePerNight);
                break;
            case "Deluxe":
                room = new DeluxeRoom(HotelManager._roomIdCounter++, pricePerNight);
                break;
            case "Suite":
                room = new SuiteRoom(HotelManager._roomIdCounter++, pricePerNight);
                break;
            default:
                console.log("‚ö†Ô∏è Lo·∫°i ph√≤ng kh√¥ng h·ª£p l·ªá.");
                return;
        }
        this._rooms.push(room);
        console.log(`‚úÖ ƒê√£ th√™m ph√≤ng lo·∫°i ${type} v·ªõi ID: ${room.roomId}`);
    }
    addCustomer(name, email, phone) {
        const customer = new Person2(HotelManager._customerIdCounter++, name, email, phone);
        this._customers.push(customer);
        console.log(`‚úÖ ƒê√£ th√™m kh√°ch h√†ng: ${customer.getDetails()}`);
    }
    bookRoom(customerId, roomId, nights) {
        const customer = this._customers.find(c => c.id === customerId);
        if (!customer) {
            console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng.");
            return;
        }
        const room = this._rooms.find(r => r.roomId === roomId);
        if (!room || !room.isAvailable) {
            console.log("‚ö†Ô∏è Ph√≤ng kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng kh·∫£ d·ª•ng.");
            return;
        }
        room.bookRoom();
        const booking = new Booking(customer, room, nights);
        this._bookings.push(booking);
        console.log(`‚úÖ ƒê·∫∑t ph√≤ng th√†nh c√¥ng: ${booking.getDetails()}`);
    }
    releaseRoom(roomId) {
        const room = this._rooms.find(r => r.roomId === roomId);
        if (!room) {
            console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ph√≤ng.");
            return;
        }
        room.releaseRoom();
    }
    listAvailableRooms() {
        const availableRooms = this._rooms.filter(r => r.isAvailable);
        if (availableRooms.length === 0) {
            console.log("üìã Kh√¥ng c√≥ ph√≤ng n√†o tr·ªëng.");
            return;
        }
        availableRooms.forEach(r => console.log(`Ph√≤ng [ID: ${r.roomId}, Lo·∫°i: ${r.roomType}, Gi√°/ƒë√™m: ${r.pricePerNight}]`));
    }
    listBookings() {
        if (this._bookings.length === 0) {
            console.log("üìã Kh√¥ng c√≥ ƒë·∫∑t ph√≤ng n√†o.");
            return;
        }
        this._bookings.forEach(booking => console.log(booking.getDetails()));
    }
}
HotelManager._customerIdCounter = 1;
HotelManager._roomIdCounter = 1;
class Main3 {
    constructor() {
        this._manager = new HotelManager();
    }
    start() {
        let running = true;
        while (running) {
            const choice = prompt("Ch·ªçn ch·ª©c nƒÉng:\n" +
                "1. Th√™m ph√≤ng m·ªõi\n" +
                "2. Th√™m kh√°ch h√†ng m·ªõi\n" +
                "3. ƒê·∫∑t ph√≤ng cho kh√°ch h√†ng\n" +
                "4. Tr·∫£ ph√≤ng\n" +
                "5. Hi·ªÉn th·ªã danh s√°ch ph√≤ng tr·ªëng\n" +
                "6. Hi·ªÉn th·ªã danh s√°ch ƒë·∫∑t ph√≤ng\n" +
                "7. D·ª´ng ch∆∞∆°ng tr√¨nh\n");
            switch (choice) {
                case "1":
                    const roomType = prompt("Nh·∫≠p lo·∫°i ph√≤ng (Standard/Deluxe/Suite):");
                    const roomPrice = parseFloat(prompt("Nh·∫≠p gi√° ph√≤ng/ƒë√™m:") || "0");
                    if (roomType && roomPrice) {
                        this._manager.addRoom(roomType, roomPrice);
                    }
                    break;
                case "2":
                    const customerName = prompt("Nh·∫≠p t√™n kh√°ch h√†ng:");
                    const customerEmail = prompt("Nh·∫≠p email kh√°ch h√†ng:");
                    const customerPhone = prompt("Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng:");
                    if (customerName && customerEmail && customerPhone) {
                        this._manager.addCustomer(customerName, customerEmail, customerPhone);
                    }
                    break;
                case "3":
                    const customerId = parseInt(prompt("Nh·∫≠p ID kh√°ch h√†ng:") || "0", 10);
                    const roomId = parseInt(prompt("Nh·∫≠p ID ph√≤ng:") || "0", 10);
                    const nights = parseInt(prompt("Nh·∫≠p s·ªë ƒë√™m l∆∞u tr√∫:") || "0", 10);
                    this._manager.bookRoom(customerId, roomId, nights);
                    break;
                case "4":
                    const releaseRoomId = parseInt(prompt("Nh·∫≠p ID ph√≤ng c·∫ßn tr·∫£:") || "0", 10);
                    this._manager.releaseRoom(releaseRoomId);
                    break;
                case "5":
                    this._manager.listAvailableRooms();
                    break;
                case "6":
                    this._manager.listBookings();
                    break;
                case "7":
                    running = false;
                    console.log("üö™ ƒê√£ tho√°t ch∆∞∆°ng tr√¨nh.");
                    break;
                default:
                    console.log("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.");
            }
        }
    }
}
const app3 = new Main3();
app3.start();
