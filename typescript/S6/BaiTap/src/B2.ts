class  Person1 {
    private _id: number;
    private _name: string;
    private _email: string;

    constructor(id: number, name: string, email: string) {
        this._id = id;
        this._name = name;
        this._email = email;
    }

    get id(): number {
        return this._id;
    }

    get name(): string {
        return this._name;
    }

    get email(): string {
        return this._email;
    }
}

abstract class BankAccount {
    protected _accountId: number;
    protected _owner: Person1;
    protected _balance: number;

    constructor(accountId: number, owner: Person1, initialBalance: number) {
        this._accountId = accountId;
        this._owner = owner;
        this._balance = initialBalance;
    }

    get accountId(): number {
        return this._accountId;
    }

    get owner(): Person1 {
        return this._owner;
    }

    get balance(): number {
        return this._balance;
    }
    
    deposit(amount: number): void {
        this._balance += amount;
        console.log(`‚úÖ ƒê√£ n·∫°p ${amount} v√†o t√†i kho·∫£n. S·ªë d∆∞ hi·ªán t·∫°i: ${this._balance}.`);
    }

    withdraw(amount: number): void {
        if (amount > this._balance) {
            console.log("‚ö†Ô∏è Kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ r√∫t ti·ªÅn.");
            return;
        }
        this._balance -= amount;
        console.log(`‚úÖ ƒê√£ r√∫t ${amount} t·ª´ t√†i kho·∫£n. S·ªë d∆∞ hi·ªán t·∫°i: ${this._balance}.`);
    }

    // √Åp d·ª•ng l√£i su·∫•t
    abstract applyInterest(): void;
}

class SavingsAccount extends BankAccount {
    private _interestRate: number;
    private _minimumBalance: number;

    constructor(accountId: number, owner: Person1, balance: number) {
        super(accountId, owner, balance);
        this._interestRate = 0.03;
        this._minimumBalance = 500;
    }


    withdraw(amount: number): void {
        if (this._balance - amount < this._minimumBalance) {
            console.log("‚ö†Ô∏è S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ r√∫t ti·ªÅn sau khi gi·ªØ l·∫°i s·ªë d∆∞ t·ªëi thi·ªÉu.");
            return;
        }
        super.withdraw(amount);
    }

    applyInterest(): void {
        const interest = this._balance * this._interestRate;
        this._balance += interest;
        console.log(`‚úÖ ƒê√£ √°p d·ª•ng l√£i su·∫•t. S·ªë d∆∞ m·ªõi: ${this._balance}.`);
    }
}

class CheckingAccount extends BankAccount {
    applyInterest(): void {
        console.log("‚ö†Ô∏è T√†i kho·∫£n thanh to√°n kh√¥ng c√≥ l√£i su·∫•t.");
    }
}

class BusinessAccount extends BankAccount {
    private _interestRate: number;
    private _transactionFee: number;

    constructor(accountId: number, owner: Person1, balance: number){
        super(accountId, owner, balance);
        this._interestRate = 0.01;
        this._transactionFee = 0.02;

    }
    deposit(amount: number): void {
        const fee = amount * this._transactionFee;
        super.deposit(amount - fee);
        console.log(`‚úÖ ƒê√£ tr·ª´ ph√≠ giao d·ªãch ${fee} khi n·∫°p ti·ªÅn.`);
    }

    withdraw(amount: number): void {
        const fee = amount * this._transactionFee;
        super.withdraw(amount + fee);
        console.log(`‚úÖ ƒê√£ tr·ª´ ph√≠ giao d·ªãch ${fee} khi r√∫t ti·ªÅn.`);
    }

    applyInterest(): void {
        const interest = this._balance * this._interestRate;
        this._balance += interest;
        console.log(`‚úÖ ƒê√£ √°p d·ª•ng l√£i su·∫•t. S·ªë d∆∞ m·ªõi: ${this._balance}.`);
    }
}

class Transaction {
    private static _transactionIdCounter = 1;
    private _transactionId: number;
    private _account: BankAccount;
    private _type: string;
    private _amount: number;
    private _timestamp: Date;

    constructor(account: BankAccount, type: string, amount: number) {
        this._transactionId = Transaction._transactionIdCounter++;
        this._account = account;
        this._type = type;
        this._amount = amount;
        this._timestamp = new Date();
    }

    getDetails(): string {
        return `Giao d·ªãch [ID: ${this._transactionId}, Lo·∫°i: ${this._type}, S·ªë ti·ªÅn: ${this._amount}, Th·ªùi gian: ${this._timestamp.toLocaleString()}]`;
    }
}

class BankManager {
    private static _customerIdCounter = 1;
    private static _accountIdCounter = 1;

    private _customers: Person1[];
    private _accounts: BankAccount[];
    private _transactions: Transaction[];

    constructor() {
        this._customers = [];
        this._accounts = [];
        this._transactions = [];
    }

    addCustomer(name: string, email: string): void {
        const customer = new Person1(BankManager._customerIdCounter++, name, email);
        this._customers.push(customer);
        console.log(`‚úÖ ƒê√£ th√™m kh√°ch h√†ng: ${customer.name}`)
    }

    createAccount(customerId: number, type: string): void {
        const customer = this._customers.find(c => c.id === customerId);
        if (!customer) {
            console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng.");
            return;
        }

        let account: BankAccount;
        switch (type) {
            case "Savings":
                account = new SavingsAccount(BankManager._accountIdCounter++, customer, 0);
                break;
            case "Checking":
                account = new CheckingAccount(BankManager._accountIdCounter++, customer, 0);
                break;
            case "Business":
                account = new BusinessAccount(BankManager._accountIdCounter++, customer, 0);
                break;
            default:
                console.log("‚ö†Ô∏è Lo·∫°i t√†i kho·∫£n kh√¥ng h·ª£p l·ªá.");
                return;
        }
        this._accounts.push(account);
        console.log(`‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n ${type} cho kh√°ch h√†ng ID: ${customerId}`);
    }

    performTransaction(accountId: number, type: string, amount: number): void {
        const account = this._accounts.find(a => a.accountId === accountId);
        if (!account) {
            console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n.");
            return;
        }

        switch (type) {
            case "Deposit":
                account.deposit(amount);
                break;
            case "Withdraw":
                account.withdraw(amount);
                break;
            default:
                console.log("‚ö†Ô∏è Lo·∫°i giao d·ªãch kh√¥ng h·ª£p l·ªá.");
                return;
        }

        const transaction = new Transaction(account, type, amount);
        this._transactions.push(transaction);
        console.log(`‚úÖ Giao d·ªãch th√†nh c√¥ng: ${transaction.getDetails()}`);
    }

    applyMonthlyInterest(): void {
        this._accounts.forEach(account => account.applyInterest());
        console.log("‚úÖ ƒê√£ √°p d·ª•ng l√£i su·∫•t h√†ng th√°ng cho t·∫•t c·∫£ t√†i kho·∫£n.");
    }
}

class Main2 {
    private _manager: BankManager = new BankManager();

    start(): void {
        let running = true;
        while (running) {
            const choice = prompt(
                "Ch·ªçn ch·ª©c nƒÉng:\n" +
                "1. Th√™m kh√°ch h√†ng m·ªõi\n" +
                "2. T·∫°o t√†i kho·∫£n\n" +
                "3. Th·ª±c hi·ªán giao d·ªãch\n" +
                "4. √Åp d·ª•ng l√£i su·∫•t h√†ng th√°ng\n" +
                "5. D·ª´ng ch∆∞∆°ng tr√¨nh\n"
            );

            switch (choice) {
                case "1":
                    const customerName = prompt("Nh·∫≠p t√™n kh√°ch h√†ng:");
                    const customerEmail = prompt("Nh·∫≠p email kh√°ch h√†ng:");
                    if (customerName && customerEmail) this._manager.addCustomer(customerName, customerEmail);
                    break;
                case "2":
                    const customerId = parseInt(prompt("Nh·∫≠p ID kh√°ch h√†ng:") || "0", 10);
                    const accountType = prompt("Nh·∫≠p lo·∫°i t√†i kho·∫£n (Savings/Checking/Business):");
                    if (accountType) this._manager.createAccount(customerId, accountType);
                    break;
                case "3":
                    const accountId = parseInt(prompt("Nh·∫≠p ID t√†i kho·∫£n:") || "0", 10);
                    const transactionType = prompt("Nh·∫≠p lo·∫°i giao d·ªãch (Deposit/Withdraw):");
                    const transactionAmount = parseFloat(prompt("Nh·∫≠p s·ªë ti·ªÅn giao d·ªãch:") || "0");
                    if (transactionType && transactionAmount > 0) this._manager.performTransaction(accountId, transactionType, transactionAmount);
                    break;
                case "4":
                    this._manager.applyMonthlyInterest();
                    break;
                case "5":
                    running = false;
                    console.log("üö™ ƒê√£ tho√°t ch∆∞∆°ng tr√¨nh.");
                    break;
                default:
                    console.log("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.");
            }
        }
    }
}

const app2 = new Main2();
app2.start();