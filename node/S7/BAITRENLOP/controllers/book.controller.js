const bookService = require("../services/book.service");

module.exports.getBooks = async function (req, res) {
  try {
    const books = await bookService.getBooks(req.query);
    res.json({ success: true, data: books });
  } catch (error) {
    res.status(500).json({ success: false, message: "L·ªói server", error });
  }
};

// üìå L·∫•y s√°ch theo ID
module.exports.getBookById = async function (req, res) {
	try {
	  const bookId = req.params.id;
	  const book = await bookService.getBookById(bookId);
  
	  if (!book) {
		return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s√°ch" });
	  }
  
	  res.json({ success: true, data: book });
	} catch (error) {
	  res.status(500).json({ success: false, message: "L·ªói server", error });
	}
};

module.exports.getBookReviews = async function (req, res) {
	try {
	  const bookId = req.params.id;
	  const reviews = await bookService.getBookReviews(bookId);
  
	  if (!reviews.length) {
		return res.status(404).json({ success: false, message: "Kh√¥ng c√≥ review n√†o cho s√°ch n√†y" });
	  }
  
	  res.json({ success: true, data: reviews });
	} catch (error) {
	  res.status(500).json({ success: false, message: "L·ªói server", error });
	}
};
  
module.exports.createBook = async function (req, res) {
	try {
	  const { title, authorId, categoryId, price, rate } = req.body;
  
	  // Ki·ªÉm tra xem s√°ch ƒë√£ t·ªìn t·∫°i ch∆∞a
	  const existingBook = await bookService.findBookByTitle(title);
	  if (existingBook) {
		return res.status(400).json({ success: false, message: "Book already exists", data: existingBook });
	  }
  
	  // Th√™m s√°ch m·ªõi
	  const [newBookId] = await bookService.createBook({ title, authorId, categoryId, price, rate });
  
	  // L·∫•y th√¥ng tin s√°ch v·ª´a th√™m
	  const newBook = await bookService.getBookById(newBookId);
  
	  res.status(201).json({ success: true, message: "Create successfully", data: newBook });
	} catch (error) {
	  res.status(500).json({ success: false, message: "L·ªói server", error });
	}
}; 

module.exports.addReview = async function (req, res) {
	try {
	  const bookId = req.params.id;
	  const { content } = req.body;
  
	  // Ki·ªÉm tra s√°ch c√≥ t·ªìn t·∫°i kh√¥ng
	  const book = await bookService.getBookById(bookId);
	  if (!book) {
		return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s√°ch" });
	  }
  
	  // Th√™m review v√†o database
	  const [reviewId] = await bookService.addReview(bookId, content);
  
	  // L·∫•y th√¥ng tin review v·ª´a th√™m
	  const newReview = await bookService.getReviewById(reviewId);
  
	  res.status(201).json({ success: true, message: "Th√™m review th√†nh c√¥ng", data: newReview });
	} catch (error) {
	  res.status(500).json({ success: false, message: "L·ªói server", error });
	}
};
  
module.exports.updateBook = async function (req, res) {
	try {
	  const bookId = req.params.id;
	  const { title, authorId, categoryId, price, rate } = req.body;
  
	  // Ki·ªÉm tra s√°ch c√≥ t·ªìn t·∫°i kh√¥ng
	  const book = await bookService.getBookById(bookId);
	  if (!book) {
		return res.status(404).json({ success: false, message: "Book not found" });
	  }
  
	  // C·∫≠p nh·∫≠t s√°ch
	  await bookService.updateBook(bookId, { title, authorId, categoryId, price, rate });
  
	  // L·∫•y th√¥ng tin s√°ch sau khi c·∫≠p nh·∫≠t
	  const updatedBook = await bookService.getBookById(bookId);
  
	  res.json({ success: true, message: "Update successfully", data: updatedBook });
	} catch (error) {
	  res.status(500).json({ success: false, message: "Server error", error });
	}
};

module.exports.deleteBook = async function (req, res) {
	try {
	  const bookId = req.params.id;
  
	  // Ki·ªÉm tra s√°ch c√≥ t·ªìn t·∫°i kh√¥ng
	  const book = await bookService.getBookById(bookId);
	  if (!book) {
		return res.status(404).json({ success: false, message: "Book not found" });
	  }
  
	  // X√≥a s√°ch
	  await bookService.deleteBook(bookId);
  
	  res.json({ success: true, message: "Delete successfully" });
	} catch (error) {
	  res.status(500).json({ success: false, message: "Server error", error });
	}
};  