const express = require('express');
const {
    getTags, getTagById, getProductsByTag,
    createTag, checkTagExists, updateTag,
    isTagUsed, deleteTag
} = require('../database/tagQueries');

const router = express.Router();

// ðŸ”¹ 1. GET /tags â†’ Láº¥y danh sÃ¡ch tags vá»›i filter, pagination, sort
router.get('/', async (req, res) => {
    try {
        const { productId, page = 1, limit = 10, sort = 'tagId', order = 'asc' } = req.query;
        const tags = await getTags({ productId, page, limit, sort, order });

        res.json({ status: 'success', page: parseInt(page), limit: parseInt(limit), total: tags.length, data: tags });
    } catch (error) {
        res.status(500).json({ status: 'error', message: 'Lá»—i server', error: error.message });
    }
});

// ðŸ”¹ 2. POST /tags â†’ ThÃªm tag má»›i
router.post('/', async (req, res) => {
    try {
        const { tagName } = req.body;
        if (!tagName) return res.status(400).json({ status: 'error', message: 'tagName lÃ  báº¯t buá»™c' });

        const newTag = await createTag(tagName);
        res.status(201).json({ status: 'success', message: 'Create successfully', data: newTag });
    } catch (error) {
        res.status(500).json({ status: 'error', message: 'Lá»—i server', error: error.message });
    }
});

// ðŸ”¹ 3. GET /tags/:tagId â†’ Láº¥y chi tiáº¿t tag
router.get('/:tagId', async (req, res) => {
    const tag = await getTagById(req.params.tagId);
    if (!tag) return res.status(404).json({ status: 'error', message: 'Tag not found' });
    res.json({ status: 'success', data: tag });
});

// ðŸ”¹ 4. PUT /tags/:tagId â†’ Cáº­p nháº­t tag
router.put('/:tagId', async (req, res) => {
    const { tagId } = req.params;
    const { tagName } = req.body;
    if (!tagName) return res.status(400).json({ status: 'error', message: 'tagName lÃ  báº¯t buá»™c' });

    if (!await checkTagExists(tagId)) return res.status(404).json({ status: 'error', message: 'Tag not found' });

    await updateTag(tagId, tagName);
    res.json({ status: 'success', message: 'Update successfully' });
});

// ðŸ”¹ 5. DELETE /tags/:tagId â†’ XÃ³a tag náº¿u khÃ´ng cÃ²n sáº£n pháº©m sá»­ dá»¥ng
router.delete('/:tagId', async (req, res) => {
    const { tagId } = req.params;

    if (!await checkTagExists(tagId)) return res.status(404).json({ status: 'error', message: 'Tag not found' });
    if (await isTagUsed(tagId)) return res.status(400).json({ status: 'error', message: 'Cannot delete: Tag is still in use' });

    await deleteTag(tagId);
    res.json({ status: 'success', message: 'Delete successfully' });
});

// ðŸ”¹ 6. GET /tags/:tagId/products â†’ Láº¥y danh sÃ¡ch sáº£n pháº©m cÃ³ tag nÃ y
router.get('/:tagId/products', async (req, res) => {
    const products = await getProductsByTag(req.params.tagId);
    res.json({ status: 'success', total: products.length, data: products });
});

module.exports = router;